{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\USP\\\\Rocketseat\\\\NLW#5 - React\\\\podcastr-cd6d1925f87dea7fa6f60d76933b0e7a26f7a81c\\\\src\\\\contexts\\\\PlayerContext.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport var PlayerContextProvider = function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PlayerContextProvider, \"LrQXJ4YCuKXOoMsmvRtpeyylJ9U=\");\n\n_c = PlayerContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/USP/Rocketseat/NLW#5 - React/podcastr-cd6d1925f87dea7fa6f60d76933b0e7a26f7a81c/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","play","episode","togglePlay","setPlayingState","state"],"mappings":";;;;;;AACA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AAmBA,OAAO,IAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,IAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,OAAgB;AAAA;;AAAA,MAAdC,QAAc,QAAdA,QAAc;;AAAA,kBACbH,QAAQ,CAAC,EAAD,CADK;AAAA,MAC5CI,WAD4C;AAAA,MAC/BC,cAD+B;;AAAA,mBAEGL,QAAQ,CAAC,CAAD,CAFX;AAAA,MAE5CM,mBAF4C;AAAA,MAEvBC,sBAFuB;;AAAA,mBAGjBP,QAAQ,CAAC,KAAD,CAHS;AAAA,MAG5CQ,SAH4C;AAAA,MAGjCC,YAHiC;;AAKnD,WAASC,IAAT,CAAcC,OAAd,EAAgC;AAC9BN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASG,UAAT,GAAsB;AACpBH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASK,eAAT,CAAyBC,KAAzB,EAAyC;AACvCL,IAAAA,YAAY,CAACK,KAAD,CAAZ;AACD;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEV,MAAAA,WAAW,EAAXA,WAAF;AAAeE,MAAAA,mBAAmB,EAAnBA,mBAAf;AAAoCI,MAAAA,IAAI,EAAJA,IAApC;AAA0CF,MAAAA,SAAS,EAATA,SAA1C;AAAqDI,MAAAA,UAAU,EAAVA,UAArD;AAAiEC,MAAAA,eAAe,EAAfA;AAAjE,KAA/B;AAAA,cACGV;AADH;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAxBM;;GAAMD,qB;;KAAAA,qB","sourcesContent":["import { type } from 'node:os';\nimport { createContext, useState } from 'react';\n\ntype Episode = {\n  title: string,\n  members: string,\n  thumbnail: string,\n  duration: number,\n  url: string;\n}\n\ntype PlayerContextData = {\n  episodeList: Array<Episode>,\n  currentEpisodeIndex: number,\n  isPlaying: boolean;\n  play: (episode: Episode) => void\n  setPlayingState: (state: boolean) => void\n  togglePlay: () => void\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData)\n\ntype PlayerContextProviderProps = {\n  childre: ReactNode\n}\n\nexport const PlayerContextProvider = ({children}) => {\n  const [episodeList, setEpisodeList] = useState([])\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0)\n  const [isPlaying, setIsPlaying] = useState(false)\n\n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state)\n  }\n\n  return (\n    <PlayerContext.Provider value={{ episodeList, currentEpisodeIndex, play, isPlaying, togglePlay, setPlayingState }}>\n      {children}\n    </PlayerContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}