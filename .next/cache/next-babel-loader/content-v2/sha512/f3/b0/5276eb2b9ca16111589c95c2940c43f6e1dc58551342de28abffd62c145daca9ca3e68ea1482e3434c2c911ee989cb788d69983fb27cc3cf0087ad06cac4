{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\USP\\\\Rocketseat\\\\NLW#5 - React\\\\podcastr-cd6d1925f87dea7fa6f60d76933b0e7a26f7a81c\\\\src\\\\contexts\\\\PlayerContext.tsx\";\nimport { createContext, useContext, useState } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport const PlayerContextProvider = ({\n  children\n}) => {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      isPlaying,\n      playList,\n      togglePlay,\n      setPlayingState,\n      playNext,\n      playPrevious,\n      hasNext,\n      hasPrevious\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["C:/USP/Rocketseat/NLW#5 - React/podcastr-cd6d1925f87dea7fa6f60d76933b0e7a26f7a81c/src/contexts/PlayerContext.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","play","episode","playList","list","index","togglePlay","toggleLoop","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextEpisodeIndex","playPrevious","usePlayer"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AAwBA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,MAAMI,qBAAqB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA4C;AAC/E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACM,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDP,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACU,SAAD;AAAA,OAAYC;AAAZ,MAA4BX,QAAQ,CAAC,KAAD,CAA1C;;AAEA,WAASY,IAAT,CAAcC,OAAd,EAAgC;AAC9BR,IAAAA,cAAc,CAAC,CAACQ,OAAD,CAAD,CAAd;AACAN,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASK,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAChDX,IAAAA,cAAc,CAACU,IAAD,CAAd;AACAR,IAAAA,sBAAsB,CAACS,KAAD,CAAtB;AACAP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASQ,UAAT,GAAsB;AACpBR,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASU,UAAT,GAAsB;AACpBP,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASS,eAAT,CAAyBC,KAAzB,EAAyC;AACvCX,IAAAA,YAAY,CAACW,KAAD,CAAZ;AACD;;AAED,QAAMC,WAAW,GAAGf,mBAAmB,GAAG,CAA1C;AACA,QAAMgB,OAAO,GAAIhB,mBAAmB,GAAG,CAAvB,GAA4BF,WAAW,CAACmB,MAAxD;;AAGA,WAASC,QAAT,GAAqB;AACnB,UAAMC,gBAAgB,GAAGnB,mBAAmB,GAAG,CAA/C;;AAEA,QAAIgB,OAAJ,EAAY;AACVf,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,WAASoB,YAAT,GAAwB;AACtB,QAAIL,WAAJ,EAAiB;AACfd,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,WADK;AAELE,MAAAA,mBAFK;AAGLM,MAAAA,IAHK;AAILJ,MAAAA,SAJK;AAKLM,MAAAA,QALK;AAMLG,MAAAA,UANK;AAOLE,MAAAA,eAPK;AAQLK,MAAAA,QARK;AASLE,MAAAA,YATK;AAULJ,MAAAA,OAVK;AAWLD,MAAAA;AAXK,KADT;AAAA,cAeGlB;AAfH;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAnEM;AAqEP,OAAO,MAAMwB,SAAS,GAAG,MAAM;AAC7B,SAAO5B,UAAU,CAACE,aAAD,CAAjB;AACD,CAFM","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\n\ntype Episode = {\n  title: string,\n  members: string,\n  thumbnail: string,\n  duration: number,\n  url: string;\n}\n\ntype PlayerContextData = {\n  episodeList: Array<Episode>,\n  currentEpisodeIndex: number,\n  isPlaying: boolean;\n  play: (episode: Episode) => void\n  setPlayingState: (state: boolean) => void\n  playList: (list: Episode[], index: number) => void\n  togglePlay: () => void\n  playNext: () => void\n  playPrevious: () => void\n  hasNext: boolean\n  hasPrevious: boolean\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData)\n\ntype PlayerContextProviderProps = {\n  children: ReactNode\n}\n\nexport const PlayerContextProvider = ({children}: PlayerContextProviderProps) => {\n  const [episodeList, setEpisodeList] = useState([])\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isLooping, setIsLooping] = useState(false)\n\n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list)\n    setCurrentEpisodeIndex(index)\n    setIsPlaying(true)\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping)\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state)\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0\n  const hasNext = (currentEpisodeIndex + 1) < episodeList.length\n\n\n  function playNext () {\n    const nextEpisodeIndex = currentEpisodeIndex + 1\n\n    if (hasNext){\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1)\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1)\n    }\n  }\n\n  return (\n    <PlayerContext.Provider \n      value={{ \n        episodeList,\n        currentEpisodeIndex,\n        play,\n        isPlaying,\n        playList,\n        togglePlay,\n        setPlayingState,\n        playNext,\n        playPrevious,\n        hasNext,\n        hasPrevious\n      }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  )\n}\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext)\n}"]},"metadata":{},"sourceType":"module"}