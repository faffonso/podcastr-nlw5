{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\USP\\\\Rocketseat\\\\NLW#5 - React\\\\podcastr\\\\src\\\\contexts\\\\PlayerContext.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport var PlayerContextProvider = function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var _nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n\n      setCurrentEpisodeIndex(_nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      isPlaying: isPlaying,\n      isLooping: isLooping,\n      isShuffling: isShuffling,\n      playList: playList,\n      togglePlay: togglePlay,\n      toggleLoop: toggleLoop,\n      toggleShuffle: toggleShuffle,\n      setPlayingState: setPlayingState,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      clearPlayerState: clearPlayerState,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PlayerContextProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/USP/Rocketseat/NLW#5 - React/podcastr/src/contexts/PlayerContext.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","clearPlayerState","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\n\ntype Episode = {\n  title: string,\n  members: string,\n  thumbnail: string,\n  duration: number,\n  url: string;\n}\n\ntype PlayerContextData = {\n  episodeList: Array<Episode>\n  currentEpisodeIndex: number\n  isPlaying: boolean\n  isLooping: boolean\n  isShuffling\n  play: (episode: Episode) => void\n  setPlayingState: (state: boolean) => void\n  playList: (list: Episode[], index: number) => void\n  togglePlay: () => void\n  toggleLoop: () => void\n  toggleShuffle: () => void\n  playNext: () => void\n  playPrevious: () => void\n  clearPlayerState: () => void\n  hasNext: boolean\n  hasPrevious: boolean\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData)\n\ntype PlayerContextProviderProps = {\n  children: ReactNode\n}\n\nexport const PlayerContextProvider = ({children}: PlayerContextProviderProps) => {\n  const [episodeList, setEpisodeList] = useState([])\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isLooping, setIsLooping] = useState(false)\n  const [isShuffling, setIsShuffling] = useState(false)\n\n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list)\n    setCurrentEpisodeIndex(index)\n    setIsPlaying(true)\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping)\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling)\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state)\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0\n  const hasNext = isShuffling ||(currentEpisodeIndex + 1) < episodeList.length\n\n\n  function playNext () {\n    if (isShuffling){\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length)\n\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex)\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex)\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1)\n    }\n  }\n\n  function clearPlayerState() {\n    setEpisodeList ([])\n    setCurrentEpisodeIndex(0)\n  }\n\n  return (\n    <PlayerContext.Provider \n      value={{ \n        episodeList,\n        currentEpisodeIndex,\n        play,\n        isPlaying,\n        isLooping,\n        isShuffling,\n        playList,\n        togglePlay,\n        toggleLoop,\n        toggleShuffle,\n        setPlayingState,\n        playNext,\n        playPrevious,\n        clearPlayerState,\n        hasNext,\n        hasPrevious\n      }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  )\n}\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext)\n}"]},"metadata":{},"sourceType":"module"}